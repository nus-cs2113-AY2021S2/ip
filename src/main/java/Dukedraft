import java.util.Scanner;

public class Sample {
    /**
     * Words for commands. 
     */
    private static final String COMMAND_MARK_WORD = "done";
    private static final String COMMAND_LIST_WORD = "list";
    private static final String COMMAND_EXIT_WORD = "bye";

    /**
     * List of all tasks. 
     */
    private static Task[] taskList;

    

    /**
     * Maximum number of tasks that can be held. 
     */
    private static final int MAX_LIST_SIZE = 100;
    private static final Scanner SCANNER = new Scanner(System.in);

    /**
     * Total number of tasks in list. 
     */
    private static int lengthOfList = 0;

    public static void main(String[] args) {
        displayWelcomeMessage();
        initTaskList();

        while (true) {
            String command = getUserInput();
            runCommand(command);

        }
    }

    private static String runCommand(String command) {
        switch (parseCommand(command)) {
            case COMMAND_EXIT_WORD:
                // Fallthrough
                displayExitMessage();
            case COMMAND_LIST_WORD:
                // Print every task in list
                return executeListAllTasks(taskList, lengthOfList);
            case COMMAND_MARK_WORD:
                // Add check for integer 
                int taskNumber = getTaskNumber(command);
                // Ensure that the task number fit the length of task
                if (isTaskNumberValid(lengthOfList, taskNumber)) {
                    markTaskAsDone(taskList, taskNumber);
                    return executeMarkTask(taskList, taskNumber);
                } else {
                    return getMessageForTaskNotFound();
                }
                break;
            case "": 
                // If no command detected, do nothing and await another command
                return getMessageForInvalidCommand()
            default:
                // if no keywords, add task to list
                return executeAddTask(command);
            }
    }

    private static void initTaskList() {
        taskList = new Task[MAX_LIST_SIZE];
    }

    private static String getUserInput() {
        // Remove trailing spaces
        String command = SCANNER.nextLine().trim();
        return command;
    }

    private static int getTaskNumber(String command) {
        int taskNumber = Integer.parseInt(command.substring(command.indexOf(" ")+1)) - 1;
        return taskNumber;
    }

    private static String getMessageForTaskNotFound() {
        return String.format(
            "    ____________________________________________________________\n" +
            "     Task not found!" + 
            "    ____________________________________________________________\n");
    }

    private static void getMessageForTaskMarkedAsDone(Task[] taskList, int taskNumber) {
        System.out.println("     Nice! I've marked this task as done: ");
        System.out.println(String.format("       [%s] %s", taskList[taskNumber].getStatusIcon(), 
            taskList[taskNumber].getDescription()));
        System.out.println("    ____________________________________________________________\n");
    }

    private static void executeMarkTask(Task[] taskList, int taskNumber) {
        taskList[taskNumber].setStatus();
    }

    private static boolean isTaskNumberValid(int lengthOfList, int taskNumber) {
        return taskNumber >= 0 && taskNumber < lengthOfList;
    }

    private static String executeListAllTasks(Task[] taskList, int lengthOfList) {
        System.out.println("    ____________________________________________________________");
        System.out.println("     Here are the tasks in your list: ");
        for (int i = 0; i < lengthOfList; i++) {
            System.out.println(String.format("     %d.[%s] %s", i+1, taskList[i].getStatusIcon(), 
                taskList[i].getDescription()));
        }
        System.out.println("    ____________________________________________________________\n");
    }

    private static String displayExitMessage() {
        System.out.println("    ____________________________________________________________");
        System.out.println("     Bye. Hope to see you again soon!");
        System.out.println("    ____________________________________________________________\n");
    }

    /**
     * Parses the command
     * 
     * @param command
     * @return
     */
    private static String parseCommand(String command) {
        return command.split(" ")[0].toLowerCase();
    }

    /**
     * Creates and adds a new task to list
     * 
     * @param taskList List containing all tasks. 
     * @param lengthOfList Current number of entries in list. 
     * @param command Name of task. 
     * @return Updated number of entries in list. 
     */
    private static int addTaskToList(Task[] taskList, int lengthOfList, String command) {
        taskList[lengthOfList] = new Task(command);
        lengthOfList++;
        return lengthOfList;
    }

    /**
     * 
     * @param command Name of task added
     */
    private static void executeAddTask(String command) {
        lengthOfList = addTaskToList(taskList, lengthOfList, command);
        // Print notification of addition
        System.out.println("    ____________________________________________________________");
        System.out.println("     added: " + command);
        System.out.println("    ____________________________________________________________\n");
    }

    private static void displayWelcomeMessage() {
        System.out.println("    ____________________________________________________________");
        System.out.println("     Hello! I'm Duke");
        System.out.println("     What can I do for you?");
        System.out.println("    ____________________________________________________________");
    }


}
